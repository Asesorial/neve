name: Deploy to QA
on:
  push:
    branches:
      - development
      - "!master"
jobs:
  deploy:
    name: Deploy to QA server
    runs-on: ubuntu-latest
    if: github.repository == 'Codeinwp/neve'
    env:
      SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
      SSH_KEY: ${{ secrets.SSH_KEY }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      QA_ROOT: ${{ secrets.QA_ROOT }}
    steps:
      - uses: actions/checkout@master
      - name: Build dist
        run: |
          npm ci
          composer install --no-dev --prefer-dist --no-progress --no-suggest
          npm run dist
      - name: Authenticate
        run: |
          mkdir $HOME/.ssh
          echo "$SSH_KEY" > "$HOME/.ssh/key"
          chmod 600 "$HOME/.ssh/key"
      - uses: chrnorm/deployment-action@releases/v1
        name: Create deployment
        id: deployment
        with:
          token: ${{ secrets.BOT_TOKEN }}
          target_url: http://qa-neve.themeisle.com/empty-site
          environment: staging
      - name: Deploy to QA env
        run: >
          rsync -rc --exclude-from="$GITHUB_WORKSPACE/.distignore" -e "ssh -i
          $HOME/.ssh/key -o StrictHostKeyChecking=no -p $SSH_PORT"
          "$GITHUB_WORKSPACE/dist/neve" $SSH_USERNAME@$SSH_HOST:$QA_ROOT
      - name: Rebuild Neve Reference
        run: >
          ssh -i $HOME/.ssh/key -o StrictHostKeyChecking=no
          $SSH_USERNAME@$SSH_HOST "bash ~/reset-neve-qa.sh"
      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: ${{ secrets.BOT_TOKEN }}
          target_url: http://qa-neve.themeisle.com/empty-site
          state: success
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
  run-visual:
    needs: deploy
    if: "!contains(github.event.head_commit.message, '[skip-visual]')"
    env:
      CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    strategy:
      matrix:
        machines: [1, 2, 3, 4]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: ~/.cache/Cypress
          key: cypress-cache-v2-${{ runner.os }}-${{ hashFiles('**/package.json') }}
      - name: GITHUB CONTEXT
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install deps
        run: |
          npm ci
      - name: Run Visual Diff
        env:
          PERCY_PARALLEL_TOTAL: 4
          PERCY_PARALLEL_NONCE: '${{ github.event_name }}-${{ github.sha }}'
        run: |
          npm run visual:test --  --browser chrome --record --parallel --group visual-diff
  empty-job:
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Meep
        run: |
          echo "Nothing to do. This is a fork."
